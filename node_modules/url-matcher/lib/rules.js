/**
 * This rule matches any character except the forward slashes.
 * This is the default rule when nothing else is specified.
 *
 * @param length specifies the precise length of the argument
 * @param minLength specifies the minimum length for the argument
 * @param maxLength specifies the maximum length for the argument
 */
'use strict';

exports.__esModule = true;
exports.string = string;
exports.greedySplat = greedySplat;
exports.splat = splat;
exports.any = any;
exports.int = int;
exports.uuid = uuid;
exports.createRule = createRule;

function string() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var maxLength = _ref.maxLength;
  var minLength = _ref.minLength;
  var length = _ref.length;

  return createRule({
    validate: function validate(val) {
      if (maxLength && val.length > maxLength) return false;
      if (minLength && val.length < minLength) return false;
      if (length && val.length !== length) return false;
      return true;
    }
  });
}

/**
 * rule for the greedy splat matcher
 */

function greedySplat() {
  return createRule({
    regex: '([\\s\\S]*)'
  });
}

/**
 * rule for the splat matcher
 */

function splat() {
  return createRule({
    regex: '([\\s\\S]*?)'
  });
}

/**
 * This rule mathces only if the value is specified in the values array
 */

function any() {
  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
    values[_key] = arguments[_key];
  }

  return createRule({
    validate: function validate(val) {
      return values.indexOf(val) !== -1;
    }
  });
}

/**
 * This rule matches non negative integers.
 * The following parameters can be specified:
 *
 * @param fixedLength specifies the precise length of the argument
 * @param max specifies the minimum value assignable
 * @param min specifies the maximum value assignable
 */

function int() {
  var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var max = _ref2.max;
  var min = _ref2.min;
  var fixedLength = _ref2.fixedLength;

  return createRule({
    regex: '(\\d+)',

    validate: function validate(val) {
      var num = Number(val);
      if (fixedLength && fixedLength !== val.length) return false;
      if (max && num > max) return false;
      if (min && num < min) return false;
      return true;
    },

    convert: function convert(val) {
      return Number(val);
    }
  });
}

/**
 * This rule matches only valid UUIDs.
 */

function uuid() {
  return createRule({
    regex: '([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})'
  });
}

/**
 * Utility functions to create custom URL rules
 */

function createRule(_ref3) {
  var regex = _ref3.regex;
  var validate = _ref3.validate;
  var convert = _ref3.convert;

  return {
    regex: regex || '([^/?#]+)',
    validate: validate || function () {
      return true;
    },
    convert: convert || function (val) {
      return val;
    }
  };
}